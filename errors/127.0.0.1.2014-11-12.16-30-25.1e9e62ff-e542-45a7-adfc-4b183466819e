(dp1
S'output'
p2
S"<class 'applications.SBtab.modules.SBtab.SBtabError'> The TableType of the SBtab is not defined!"
p3
sS'layer'
p4
S'/home/tlubitz/web2py/applications/SBtab/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - call exposes all registered services (none by default)\n#########################################################################\nimport tablib\nimport tablibIO\nimport validatorSBtab\nimport sbml2sbtab\nimport sbtab2sbml\nimport libsbml\nimport splitTabs\nimport tablib.packages.xlrd as xlrd\n\ndef index():\n    session.ex_warning = None\n    if not session.has_key(\'name2doc\'):\n        session.name2doc = {}\n    redirect(URL(\'../../static/introduction.html\'))\n\ndef clearsession():\n    session.sbtabs = []\n    session.sbtab_filenames = []\n    session.sbtab_docnames = []\n    session.sbtab_types = []\n    session.name2doc = {}\n    session.todeletename = []\n    \n    session.ex_warning = \'\'\n    #session.definition_file = []\n    #session.definition_file_name = []\n\n    session.sbmls = []\n    session.sbml_filenames = []\n\n    redirect(URL(\'../../static/introduction.html\'))\n\ndef validator():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simple replace the two lines below with:\n    return auth.wiki()\n    """\n    #response.flash = T("Welcome to web2py!")\n    #session.clear()\n    response.title    = T(\'SBtab - Standardised data tables for Systems Biology\')\n    response.subtitle = T(\'Online Validator\')\n\n    lform = SQLFORM.factory(Field(\'File\', \'upload\',uploadfolder="/tmp", label=\'Upload SBtab file (.csv, .xls)\'))\n\n    #update session lists\n    if lform.process().accepted:\n        response.flash = \'form accepted\'\n        session.ex_warning = None\n        #try:\n        FileValidClass = validatorSBtab.ValidateFile(request.vars.File.value,request.vars.File.filename)\n        separator      = FileValidClass.checkseparator(request.vars.File.value)\n        (sbtab_list,types,docs) = splitTabs.checkTabs([request.vars.File.value],request.vars.File.filename,separator=separator)\n        if not session.has_key(\'sbtabs\'):\n            session.sbtabs = [\'\\n\'.join(sbtab_list[0])]\n            session.sbtab_filenames = [request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:]]\n            session.sbtab_docnames  = [docs[0]]\n            session.sbtab_types     = [types[0]]\n            session.todeletename    = [request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:]]\n            session.name2doc[request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:]] = docs[0]\n            if len(sbtab_list) > 1:\n                for i,sbtab in enumerate(sbtab_list[1:]):\n                    session.sbtabs.append(\'\\n\'.join(sbtab))\n                    session.sbtab_filenames.append(request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:])\n                    session.sbtab_docnames.append(docs[i])\n                    session.sbtab_types.append(types[i])\n                    session.todeletename.append(request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:])\n                    session.name2doc[request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:]] = docs[i]\n        else:\n            if len(sbtab_list) > 1:\n                for i,sbtab in enumerate(sbtab_list):\n                    session.sbtabs.append(\'\\n\'.join(sbtab))\n                    session.sbtab_filenames.append(request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:])\n                    session.sbtab_docnames.append(docs[i])\n                    session.sbtab_types.append(types[i])\n                    session.todeletename.append(request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:])\n                    session.name2doc[request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:]] = docs[i]\n            else:\n                session.sbtabs.append(\'\\n\'.join(sbtab_list[0]))\n                session.sbtab_filenames.append(request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:])\n                session.sbtab_docnames.append(docs[0])\n                session.sbtab_types.append(types[0])\n                session.todeletename.append(request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:])\n                session.name2doc[request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:]] = docs[0]\n            #redirect(URL(\'\'))\n        #except:\n        #    session.ex_warning = \'The file that you uploaded is no valid SBtab file. Please only use .csv or .xls format. If it still does not work out, please consult the SBtab specification.\'\n    elif lform.errors:\n        response.flash = \'form has errors\'\n\n    #pushed validation button\n    if request.vars.validate_button:\n        try:\n            FileValidClass = validatorSBtab.ValidateFile(session.sbtabs[int(request.vars.validate_button)],session.sbtab_filenames[int(request.vars.validate_button)])\n            v_output       = FileValidClass.returnOutput()\n            try:\n                separator      = FileValidClass.checkseparator(session.sbtabs[int(request.vars.validate_button)])\n                new_tablib_obj = tablibIO.importSetNew(session.sbtabs[int(request.vars.validate_button)],session.sbtab_filenames[int(request.vars.validate_button)],separator=separator)\n            except:\n                new_tablib_obj = tablibIO.importSetNew(session.sbtabs[int(request.vars.validate_button)],session.sbtab_filenames[int(request.vars.validate_button)])\n\n            if new_tablib_obj:\n                if session.definition_file:\n                    TableValidClass = validatorSBtab.ValidateTable(new_tablib_obj,session.sbtab_filenames[int(request.vars.validate_button)],session.definition_file[0],session.definition_file_name[0])\n                    for itemx in TableValidClass.returnOutput():\n                        v_output.append(itemx)\n                else:\n                    TableValidClass = validatorSBtab.ValidateTable(new_tablib_obj,session.sbtab_filenames[int(request.vars.validate_button)])\n                    for itemx in TableValidClass.returnOutput():\n                        v_output.append(itemx)\n            sbtab2val  = session.sbtab_filenames[int(request.vars.validate_button)]\n            #redirect(URL(\'\'))\n            session.ex_warning = None\n        except:\n            session.ex_warning = \'Your file is corrupt. Even too corrupt to be validated. Please remove it and see the SBtab specification to try and create a better SBtab file.\'\n            v_output  = \'\'\n            sbtab2val = \'\'\n    else:\n        v_output  = \'\'\n        sbtab2val = \'\'\n\n    #pushed erase button\n    if request.vars.erase_button:\n        del session.sbtabs[int(request.vars.erase_button)]\n        del session.sbtab_filenames[int(request.vars.erase_button)]\n        del session.sbtab_docnames[int(request.vars.erase_button)]\n        del session.sbtab_types[int(request.vars.erase_button)]\n        del session.name2doc[session.todeletename[int(request.vars.erase_button)]]\n        del session.todeletename[int(request.vars.erase_button)]\n        session.ex_warning = None\n        redirect(URL(\'\'))\n\n    return dict(UPL_FORM=lform,SBTAB_LIST=session.sbtabs,NAME_LIST=session.sbtab_filenames,V_OUTPUT=v_output,SBTAB2VAL=sbtab2val,DOC_NAMES=session.sbtab_docnames,NAME2DOC=session.name2doc,EXWARNING=session.ex_warning)\n\ndef converter():\n    response.title = T(\'SBtab - Standardised data tables for Systems Biology\')\n    response.subtitle = T(\'SBML / SBtab Conversion\')\n\n    #Form for SBtab files\n    lform = SQLFORM.factory(Field(\'File\', \'upload\',uploadfolder="/tmp", label=\'Upload SBtab file to convert (.csv, .xls)\'))\n\n    #update session lists\n    if lform.process(formname=\'form_one\').accepted:\n            response.flash = \'form accepted\'\n            #try:\n            (sbtab_list,types,docs) = splitTabs.checkTabs([request.vars.File.value],request.vars.File.filename)\n            if not session.has_key(\'sbtabs\'):\n                session.sbtabs = [\'\\n\'.join(sbtab_list[0])]\n                session.sbtab_filenames = [request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:]]\n                session.sbtab_docnames  = [docs[0]]\n                session.sbtab_types     = [types[0]]\n                session.todeletename    = [request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:]]\n                session.name2doc[request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:]] = docs[0]\n                if len(sbtab_list) > 1:\n                    for i,sbtab in enumerate(sbtab_list[1:]):\n                        session.sbtabs.append(\'\\n\'.join(sbtab))\n                        session.sbtab_filenames.append(request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:])\n                        session.sbtab_docnames.append(docs[i])\n                        session.sbtab_types.append(types[i])\n                        session.todeletename.append(request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:])\n                        session.name2doc[request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:]] = docs[i]\n            else:\n                if len(sbtab_list) > 1:\n                    for i,sbtab in enumerate(sbtab_list):\n                        session.sbtabs.append(\'\\n\'.join(sbtab))\n                        session.sbtab_filenames.append(request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:])\n                        session.sbtab_docnames.append(docs[i])\n                        session.sbtab_types.append(types[i])\n                        session.todeletename.append(request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:])\n                        session.name2doc[request.vars.File.filename[:-4]+\'_\'+types[i]+request.vars.File.filename[-4:]] = docs[i]\n                else:\n                    session.sbtabs.append(\'\\n\'.join(sbtab_list[0]))\n                    session.sbtab_filenames.append(request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:])\n                    session.sbtab_docnames.append(docs[0])\n                    session.sbtab_types.append(types[0])\n                    session.todeletename.append(request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:])\n                    session.name2doc[request.vars.File.filename[:-4]+\'_\'+types[0]+request.vars.File.filename[-4:]] = docs[0]\n        #except:\n        #    session.ex_warning = \'The file that you uploaded is no SBtab file. Please only use .tsv, .csv, or .xls format. If it still does not work out, please consult the SBtab specification.\'\n    elif lform.errors:\n        response.flash = \'form has errors\'\n\n\n    # convert sbtab2sbml button is pushed\n    if request.vars.c2sbml_button:\n        try:\n            sbtab_document = sbtab2sbml.SBtabDocument(session.sbtabs[int(request.vars.c2sbml_button)],session.sbtab_filenames[int(request.vars.c2sbml_button)])\n            new_sbml       = sbtab_document.makeSBML()\n            if not session.has_key(\'sbmls\'):\n                session.sbmls = [new_sbml]\n                session.sbml_filenames = [session.sbtab_filenames[int(request.vars.c2sbml_button)].rstrip(\'.tcsvxl\')+\'_SBML.xml\']\n            else:\n                session.sbmls.append(new_sbml)\n                session.sbml_filenames.append(session.sbtab_filenames[int(request.vars.c2sbml_button)].rstrip(\'.tcxlsv\')+\'_SBML.xml\')\n        except:\n            session.ex_warning = \'The SBtab file could not be converted to SBML. Please check whether you have a valid Reaction SBtab file.\'\n\n    if request.vars.dl_sbtab_button:\n        downloader_sbtab()\n\n    if request.vars.convert_all_button:\n        try:\n            convert_document = session.sbtab_docnames[int(request.vars.convert_all_button)]\n            merged_sbtabs    = []\n            for i,docname in enumerate(session.sbtab_docnames):\n                if docname == convert_document:\n                    merged_sbtabs.append(session.sbtabs[i])\n            sbtab_document = sbtab2sbml.SBtabDocument(merged_sbtabs,\'merged_unknown.tsv\',tabs=2)\n            new_sbml       = sbtab_document.makeSBML()\n            if not session.has_key(\'sbmls\'):\n                session.sbmls = [new_sbml]\n                session.sbml_filenames = [convert_document+\'.xml\']\n            else:\n                session.sbmls.append(new_sbml)\n                session.sbml_filenames.append(convert_document+\'.xml\')\n        except:\n            session.ex_warning = \'The SBtab file could not be converted to SBML. Please check whether you have a valid Reaction SBtab file.\'\n\n    #Form for SBML files\n    rform = SQLFORM.factory(Field(\'File\', \'upload\',uploadfolder="/tmp", label=\'Upload SBML file to convert (.xml)\'))\n\n    if rform.process(formname=\'form_two\').accepted:\n        response.flash = \'form accepted\'\n        if not session.has_key(\'sbmls\'):\n            session.sbmls = [request.vars.File.value]\n            session.sbml_filenames = [request.vars.File.filename]\n        else:\n            session.sbmls.append(request.vars.File.value)\n            session.sbml_filenames.append(request.vars.File.filename)\n    elif rform.errors:\n        response.flash = \'form has errors\'\n\n    if request.vars.erase_sbml_button:\n        del session.sbmls[int(request.vars.erase_sbml_button)]\n        del session.sbml_filenames[int(request.vars.erase_sbml_button)]\n        session.ex_warning = None\n        redirect(URL(\'\'))\n\n    # convert sbml2sbtab button is pushed\n    if request.vars.c2sbtab_button:\n        try:\n            reader     = libsbml.SBMLReader()\n            sbml_model = reader.readSBMLFromString(session.sbmls[int(request.vars.c2sbtab_button)])\n            ConvSBMLClass = sbml2sbtab.SBMLDocument(sbml_model.getModel(),session.sbml_filenames[int(request.vars.c2sbtab_button)])\n            tab_output    = ConvSBMLClass.makeSBtabs()\n            # append generated SBtabs to session variables\n            for SBtab in tab_output:\n                if not session.has_key(\'sbtabs\'):\n                    session.sbtabs = [SBtab[0]]\n                    session.sbtab_filenames = [session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')+\'_\'+SBtab[1]]\n                    session.sbtab_docnames = [session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')]\n                    session.sbtab_types    = [SBtab[1]]\n                    session.todeletename   = [session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')+\'_\'+SBtab[1]]\n                    session.name2doc[session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')+\'_\'+SBtab[1]] = session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')\n                else:\n                    session.sbtabs.append(SBtab[0])\n                    session.sbtab_filenames.append(session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')+\'_\'+SBtab[1])\n                    session.sbtab_docnames.append(session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\'))\n                    session.sbtab_types.append(SBtab[1])\n                    session.todeletename.append(session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')+\'_\'+SBtab[1])\n                    session.name2doc[session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')+\'_\'+SBtab[1]] = session.sbml_filenames[int(request.vars.c2sbtab_button)].rstrip(\'.xml\')\n            #redirect(URL(\'\'))\n        except:\n            session.ex_warning = \'The SBML file could not be converted to SBtab. Please check whether your SBML file is valid.\'\n\n    if request.vars.erase_sbtab_button:\n        del session.sbtabs[int(request.vars.erase_sbtab_button)]\n        del session.sbtab_filenames[int(request.vars.erase_sbtab_button)]\n        del session.sbtab_docnames[int(request.vars.erase_sbtab_button)]\n        del session.sbtab_types[int(request.vars.erase_sbtab_button)]\n        del session.name2doc[session.todeletename[int(request.vars.erase_sbtab_button)]]\n        del session.todeletename[int(request.vars.erase_sbtab_button)]\n        session.ex_warning = None\n        redirect(URL(\'\'))\n\n    if request.vars.dl_sbml_button:\n        downloader_sbml()\n        \n    return dict(UPL_FORML=lform,UPL_FORMR=rform,SBTAB_LIST=session.sbtabs,SBML_LIST=session.sbmls,NAME_LIST_SBTAB=session.sbtab_filenames,NAME_LIST_SBML=session.sbml_filenames,DOC_NAMES=session.sbtab_docnames,NAME2DOC=session.name2doc,EXWARNING=session.ex_warning,TYPES=session.sbtab_types)\n\n\ndef def_files():\n    \'\'\'\n    upload your own definition SBtab\n    \'\'\'\n    response.title = T(\'SBtab - Standardised data tables for Systems Biology\')\n    response.subtitle = T(\'Upload your own definition files\')\n\n    dform = SQLFORM.factory(Field(\'File\', \'upload\',uploadfolder="/tmp", label=\'Upload definition file (.csv, .tsv)\'))\n\n    #update session lists\n    if dform.process().accepted:\n        response.flash = \'form accepted\'\n        session.definition_file      = [request.vars.File.value]\n        session.definition_file_name = [request.vars.File.filename]\n    elif dform.errors:\n        response.flash = \'form has errors\'\n\n    #pushed erase button\n    if request.vars.erase_def_button:\n        del session.definition_file[int(request.vars.erase_def_button)]\n        del session.definition_file_name[int(request.vars.erase_def_button)]\n        redirect(URL(\'\'))\n\n    return dict(UPL_FORM=dform,DEF_FILE=session.definition_file,DEF_NAME=session.definition_file_name)\n\ndef downloader_sbtab():\n        response.headers[\'Content-Type\'] = \'text/csv\'\n        if not session.sbtab_filenames[int(request.vars.dl_sbtab_button)].endswith(\'.csv\') and not session.sbtab_filenames[int(request.vars.dl_sbtab_button)].endswith(\'.tsv\'):\n            attachment = \'attachment;filename=\' + session.sbtab_filenames[int(request.vars.dl_sbtab_button)]+\'.csv\'\n        else: attachment = \'attachment;filename=\' + session.sbtab_filenames[int(request.vars.dl_sbtab_button)]\n        response.headers[\'Content-Disposition\'] = attachment\n        \n        content = session.sbtabs[int(request.vars.dl_sbtab_button)]\n        raise HTTP(200,str(content),\n                   **{\'Content-Type\':\'text/csv\',\n                      \'Content-Disposition\':attachment + \';\'})\n\ndef downloader_sbml():\n        response.headers[\'Content-Type\'] = \'text/xml\'\n        if not session.sbml_filenames[int(request.vars.dl_sbml_button)].endswith(\'.xml\'):\n            attachment = \'attachment;filename=\' + session.sbml_filenames[int(request.vars.dl_sbml_button)]+\'.xml\'\n        else: attachment = \'attachment;filename=\' + session.sbml_filenames[int(request.vars.dl_sbml_button)]\n        response.headers[\'Content-Disposition\'] = attachment\n        \n        content = session.sbmls[int(request.vars.dl_sbml_button)]\n        raise HTTP(200,str(content),\n                   **{\'Content-Type\':\'text/xml\',\n                      \'Content-Disposition\':attachment + \';\'})\n\ndef show_sbtab_xls():\n    \'\'\'\n    displays xls SBtab file\n    \'\'\'\n    file_name = session.sbtab_filenames[int(request.args(0))]\n    xls_sbtab = session.sbtabs[int(request.args(0))]\n\n    nice_sbtab = \'<p><h2><b>\'+file_name+\'</b></h2></p>\'\n\n    dbook = tablib.Databook()\n    xl = xlrd.open_workbook(file_contents=xls_sbtab)\n\n    for sheetname in xl.sheet_names():\n        dset = tablib.Dataset()\n        dset.title = sheetname\n        sheet = xl.sheet_by_name(sheetname)\n        for row in range(sheet.nrows):\n            if row == 0:\n                new_row = \'\'\n                for thing in sheet.row_values(row):\n                    if not thing == \'\': new_row += thing\n                nice_sbtab += \'<a style="background-color:#A4A4A4">\'+new_row+\'</a><br>\'\n                nice_sbtab += \'<table>\'\n            elif row == 1:\n                new_row = \'\'\n                for thing in sheet.row_values(row):\n                    if not thing == \'\': new_row += \'<td>\'+thing+\'</td>\'\n                nice_sbtab += \'<tr bgcolor="#BDBDBD">\'+new_row+\'</tr>\'\n            else:\n                new_row = \'\'\n                for thing in sheet.row_values(row):\n                    new_row += \'<td>\'+thing+\'</td>\'\n                nice_sbtab += \'<tr>\'+new_row+\'</tr>\'\n                    \n    return nice_sbtab    \n\ndef show_sbtab():\n    \'\'\'\n    displays a given SBtab file\n    \'\'\'\n    file_name = session.sbtab_filenames[int(request.args(0))]\n    if file_name.endswith(\'.tsv\') or file_name.endswith(\'.csv\'):\n        delimiter = \'\\t\'\n    else: return show_sbtab_xls()\n    \n    ugly_sbtab = session.sbtabs[int(request.args(0))].split(\'\\n\')\n    nice_sbtab = \'<p><h2><b>\'+session.sbtab_filenames[int(request.args(0))]+\'</b></h2></p>\'\n\n    nice_sbtab += \'<a style="background-color:#A4A4A4">\'+ugly_sbtab[0]+\'</a><br>\'\n\n    nice_sbtab += \'<table>\'\n    for row in ugly_sbtab[1:]:\n        if row.startswith(\'!\'): nice_sbtab += \'<tr bgcolor="#BDBDBD">\'\n        else: nice_sbtab += \'<tr>\'\n        for thing in row.split(delimiter):\n            new_row = \'<td>\'+thing+\'</\\td>\'\n            nice_sbtab += new_row\n        nice_sbtab += \'</tr>\'\n    nice_sbtab += \'</table>\'\n    \n    return nice_sbtab\n\ndef show_sbml():\n    \'\'\'\n    displays a given SBML file\n    \'\'\'\n    new_sbml = \'<xmp>\'\n    old_sbml = session.sbmls[int(request.args(0))].split(\'\\n\')\n\n    for row in old_sbml:\n        new_sbml += row + \'\\n\'\n\n    new_sbml += \'</xmp>\'\n        \n    return new_sbml\n\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in \n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_signature()\ndef data():\n    """\n    http://..../[app]/default/data/tables\n    http://..../[app]/default/data/create/[table]\n    http://..../[app]/default/data/read/[table]/[id]\n    http://..../[app]/default/data/update/[table]/[id]\n    http://..../[app]/default/data/delete/[table]/[id]\n    http://..../[app]/default/data/select/[table]\n    http://..../[app]/default/data/search/[table]\n    but URLs must be signed, i.e. linked with\n      A(\'table\',_href=URL(\'data/tables\',user_signature=True))\n    or with the signed load operator\n      LOAD(\'default\',\'data.load\',args=\'tables\',ajax=True,user_signature=True)\n    """\n    return dict(form=crud())\n\nresponse._vars=response._caller(converter)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/home/tlubitz/web2py/gluon/restricted.py", line 217, in restricted\n    exec ccode in environment\n  File "/home/tlubitz/web2py/applications/SBtab/controllers/default.py", line 473, in <module>\n  File "/home/tlubitz/web2py/gluon/globals.py", line 372, in <lambda>\n    self._caller = lambda f: f()\n  File "/home/tlubitz/web2py/applications/SBtab/controllers/default.py", line 158, in converter\n    (sbtab_list,types,docs) = splitTabs.checkTabs([request.vars.File.value],request.vars.File.filename)\n  File "applications/SBtab/modules/splitTabs.py", line 43, in checkTabs\n    single_tab = SBtab.SBtabTable(new_tablib_obj,filename)\n  File "applications/SBtab/modules/SBtab.py", line 69, in __init__\n    self.initializeTable()\n  File "applications/SBtab/modules/SBtab.py", line 81, in initializeTable\n    (self.table_type, self.table_name, self.table_document, self.table_level, self.table_version) = self.getTableInformation()\n  File "applications/SBtab/modules/SBtab.py", line 171, in getTableInformation\n    raise SBtabError(\'The TableType of the SBtab is not defined!\')\nSBtabError: The TableType of the SBtab is not defined!\n'
p11
s.